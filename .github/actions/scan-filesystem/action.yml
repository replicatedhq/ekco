name: Scan Filesystem with Grype SARIF
description: 'Scan filesystem for vulnerabilities and optionally upload the results for GitHub code scanning'
inputs:
  path:
    description: 'The filesystem path to scan'
    required: true
    default: '.'
  upload-sarif:
    description: 'Whether to upload the scan results as a SARIF file'
    required: false
    default: 'true'
  severity-cutoff:
    description: 'Minimum severity to report (critical, high, medium, low, negligible)'
    required: false
    default: 'medium'
  fail-build:
    description: 'Fail the workflow if vulnerabilities are found'
    required: false
    default: 'true'
  output-file:
    description: 'Output file name for SARIF results'
    required: false
    default: 'results.sarif'
  timeout-minutes:
    description: 'Maximum time in minutes to wait for the scan to complete'
    required: false
    default: '30'
  retention-days:
    description: 'Number of days to retain the scan results artifact'
    required: false
    default: '90'
  category-prefix:
    description: 'Prefix to use for the SARIF category name'
    required: false
    default: 'filesystem-scan-'
  only-fixed:
    description: 'Only report vulnerabilities that have a fix available'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    - name: Scan filesystem with Grype
      uses: anchore/scan-action@v6
      id: scan
      continue-on-error: ${{ inputs.fail-build != 'true' }}
      with:
        path: "${{ inputs.path }}"
        fail-build: "${{ inputs.fail-build }}"
        severity-cutoff: "${{ inputs.severity-cutoff }}"
        output-format: sarif
        output-file: "${{ inputs.output-file }}"
        by-cve: true
        only-fixed: "${{ inputs.only-fixed }}"

    - name: Check scan status
      if: steps.scan.outcome == 'failure' && inputs.fail-build == 'true'
      shell: bash
      run: |
        echo "::error::Scan failed for path ${{ inputs.path }}"
        echo "Please check the scan logs above for details"
        exit 1

    - name: Enrich or generate SARIF
      if: ${{ !cancelled() && inputs.upload-sarif == 'true' }}
      shell: bash
      run: |
        if [ ! -f ${{ inputs.output-file }} ]; then
          echo "No SARIF file found â€” creating minimal empty SARIF"
          echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"Anchore Grype","informationUri":"https://github.com/anchore/grype","rules":[]}},"results":[],"properties":{"isFallbackSarif":true}}]}' > ${{ inputs.output-file }}
        fi

        # Validate SARIF file before enrichment
        if ! jq empty ${{ inputs.output-file }}; then
          echo "::error::Invalid SARIF file detected"
          exit 1
        fi

        # Create a backup of the original file
        cp ${{ inputs.output-file }} ${{ inputs.output-file }}.bak

        # Attempt to enrich the SARIF file
        if ! jq --arg path "${{ inputs.path }}" \
           --arg repo "replicatedhq/ekco" \
           --arg scanTime "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
           '
           .runs[0].properties = {
              "scanPath": $path,
              "repository": $repo,
              "scanTime": $scanTime,
              "DisplayName": "filesystem:" + $path,
              "UniqueID": "filesystem:" + $path,
              "scanMetadata": {
                "path": $path,
                "annotations": {
                  "scanTime": $scanTime,
                  "tool": "grype",
                  "toolVersion": "latest"
                }
              }
            }' ${{ inputs.output-file }} > enriched-results.sarif; then
          echo "::error::Failed to enrich SARIF file"
          # Restore the backup
          mv ${{ inputs.output-file }}.bak ${{ inputs.output-file }}
          exit 1
        fi

        # Validate the enriched file
        if ! jq empty enriched-results.sarif; then
          echo "::error::Invalid enriched SARIF file"
          # Restore the backup
          mv ${{ inputs.output-file }}.bak ${{ inputs.output-file }}
          exit 1
        fi

        mv enriched-results.sarif ${{ inputs.output-file }}
        rm -f ${{ inputs.output-file }}.bak

    - name: Upload SARIF file
      if: ${{ !cancelled() && inputs.upload-sarif == 'true' }}
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ inputs.output-file }}
        category: '${{ inputs.category-prefix }}filesystem'

    - name: Archive scan results
      if: ${{ !cancelled() && inputs.upload-sarif == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: "sarif-filesystem"
        path: ${{ inputs.output-file }}
        retention-days: ${{ inputs.retention-days }}
